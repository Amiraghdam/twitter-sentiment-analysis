= Introduzione =
In questo progetto viene presentata un'applicazione che permette di effettuare sentiment analysis su twitter utilizzando tecniche di machine learning.
L'applicazione può essere utilizzata tramite linea di comando o tramite API consultabili attraverso la documentazione Javadoc.

= Utilizzo tramite linea di comando =

Lista di comandi e loro significato:

*prepareTrain:*
Costruisce le strutture dati necessarie per l'addestramento del classificatore tra cui un file contenente i termini utilizzati suddivisi per tweet. E' possibile inoltre inserire due parametri opzionali:
"-sf": elimina i termini utilizzati una sola volta
"-re": elimina le emoticons non considerandole quindi durante l'addestramento del classificatore.

*construct {{{<nome-classificatore>}}}:*
costruisce e addestra il classificatore specificato nel parametro.
E' possibile inserire un ulteriore parametro opzionale indicante il numero di termini totali da selezionare per l'addestramento.

*weightedMajority {{{<nomi-classificatori>}}}:*
costruisce un classificatore weighted majority utilizzando i classificatori specificati come parametri.

*evaluateWm:*
Valuta il classificatore weighted majority tramite un insieme di tweets di test.

= Utilizzo tramite API =

*Esempio di costruzione di un classificatore*:
Gli oggetti principali da utilizzare sono "ClassifierBuilder" e "Options". Il primo si occupa della costruzione e dell'addestramento del classificatore mentre il secondo è responsabile della gestione delle varie opzioni del classificatore.

{{{
ClassifierBuilder clb = new ClassifierBuilder();
Options opt = new Options();
clb.setOpt(opt);
//seleziona solo i termini utilizzati più di una volta
opt.setSelectedFeaturesByFrequency(true);
//seleziona solamente 150 termini
opt.setNumFeatures(150);
//rimuove le emoticons
opt.setRemoveEmoticons(true);
clb.prepareTrain();
clb.prepareTest();
NaiveBayes nb = new NaiveBayes();
clb.constructClassifier(nb);
}}}

*Esempio di costruzione ed utilizzo di un classificatore weighted majority a partire da classificatori già costruiti:*
{{{
List<IClassifier> classifiers = new LinkedList<IClassifier>();
ClassifierBuilder cb = new ClassifierBuilder();
//prende tre classificatori già costruiti
WekaClassifier wc1 = cb.retrieveClassifier("weka.classifiers.bayes.NaiveBayes");
WekaClassifier wc2 = cb.retrieveClassifier("weka.classifiers.trees.J48");
WekaClassifier wc3 = cb.retrieveClassifier("weka.classifiers.functions.VotedPerceptron");
classifiers.add(wc1);
classifiers.add(wc2);
classifiers.add(wc3);
WeightedMajority wm  = new WeightedMajority(classifiers);
//costruisce e classifica un tweet
Item item = wm.weightedClassify("i am very sad");
System.out.println(item.getPolarity());
//imposta la polarità del tweet
item.setTarget("4");
//comunica al classificatore weighted majority la polarità esatta del tweet
wm.setTarget(item);
System.out.println(wm.get_cl2weight().get(1) + " " + wm.get_cl2weight().get(2) + " " + wm.get_cl2weight().get(3));
}}}